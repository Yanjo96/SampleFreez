# Generated by Django 2.0.3 on 2018-03-28 06:13

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BioSample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a name for the biosample (e.g. Biosample 1)', max_length=50)),
                ('whoose', models.CharField(help_text='Enter the id whoose biosample is for (e.g. T1234)', max_length=50)),
                ('contactPerson', models.CharField(help_text='Enter the contact person for this biosample', max_length=100)),
                ('state', models.CharField(blank=True, choices=[('lying', 'lying'), ('sitting', 'sitting'), ('standing', 'standing')], max_length=50)),
                ('sober', models.CharField(blank=True, choices=[('sober', 'sober'), ('not sober', 'not sober')], max_length=50)),
                ('centrifugate', models.BooleanField()),
                ('pipet', models.BooleanField()),
                ('commentstep', models.TextField(blank=True, help_text='Enter a comment', max_length=1000)),
                ('plasma', models.BooleanField()),
                ('plasmanumber', models.IntegerField(blank=True, default=0)),
                ('seroes', models.BooleanField()),
                ('seroesnumber', models.IntegerField(blank=True, default=0)),
                ('commentaliquot', models.TextField(blank=True, help_text='Enter a comment', max_length=1000)),
                ('aliquot', models.BooleanField()),
                ('tubes', models.BooleanField()),
                ('transfer', models.TextField(blank=True, help_text='which samples when and where', max_length=1000)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Box',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a name for the Box (e.g. Box 1)', max_length=50)),
                ('space', models.IntegerField(help_text='Enter how many tubes can store in the box')),
                ('comment', models.TextField(blank=True, help_text='Enter a comment if you want', max_length=1000)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Compartment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a name for the copartment (e.g. Compartment 1)', max_length=50)),
                ('space', models.IntegerField(help_text='Enter how many racks can store in the compartment')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Freezer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a name for the freezer (e.g. Freezer 1)', max_length=50)),
                ('temperature', models.IntegerField(help_text='Enter the temperature of the freezer (e.g. -80)')),
                ('space', models.IntegerField(help_text='Enter how many compartments can store in the freezer')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Rack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a name for the rack (e.g. Rack 1)', max_length=50)),
                ('space', models.IntegerField(help_text='Enter how many rackmodules can store in the rack')),
                ('compartment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sample.Compartment')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Rackmodule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a name for the rackmodule (e.g. Rackmodule 1)', max_length=50)),
                ('space', models.IntegerField(help_text='Enter how many boxes can store in the rackmodule')),
                ('rack', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sample.Rack')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tube',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a name for the rack (e.g. Tube 1)', max_length=50)),
                ('xvalue', models.IntegerField(blank=True, help_text='Enter the postion of the tube in the x coordinate')),
                ('yvalue', models.IntegerField(blank=True, help_text='Enter the postion of the tube in the y coordinate')),
                ('comment', models.TextField(blank=True, help_text='Enter a comment if you want', max_length=1000)),
                ('biosample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sample.BioSample')),
                ('box', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='sample.Box')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter the type of the biosample (e.g. Blood)', max_length=50)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='compartment',
            name='freezer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sample.Freezer'),
        ),
        migrations.AddField(
            model_name='box',
            name='compartment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sample.Compartment'),
        ),
        migrations.AddField(
            model_name='box',
            name='freezer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sample.Freezer'),
        ),
        migrations.AddField(
            model_name='box',
            name='rack',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sample.Rack'),
        ),
        migrations.AddField(
            model_name='box',
            name='rackmodule',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sample.Rackmodule'),
        ),
        migrations.AddField(
            model_name='biosample',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sample.Type'),
        ),
    ]
